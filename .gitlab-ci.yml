stages:
  - lint
  - dvc
  - docker
  - deploy

lint:
  stage: lint
  image: python:3.10
  script:
    - python -m pip install --upgrade pip
    - pip install flake8
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  only:
    - main

run-dvc-pipeline:
  stage: dvc
  image: python:3.10
  dependencies:
    - lint
  script:
    - pip install -r requirements.txt dvc[s3]
    # Configure DVC to use the AWS S3 remote.
    # DVC will automatically use the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
    # environment variables set in GitLab's CI/CD settings.
    - dvc remote add -f -d storage s3://$AWS_S3_BUCKET
    - dvc remote modify storage region $AWS_REGION

    # Pull data from S3, run the pipeline, and push results back
    - dvc pull -r storage
    - dvc repro
    - dvc push -r storage

    # Commit dvc.lock file changes to git
    - git config --global user.name "${CI_PROJECT_NAME} CI"
    - git config --global user.email "${CI_PROJECT_NAME}-ci@example.com"
    - git add .
    - git commit -m "Update DVC tracked files [ci skip]" || echo "No changes to commit"
    - git push "https://${CI_USER}:${CI_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" HEAD:main
  only:
    - main

build-and-push-docker:
  stage: docker
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  dependencies:
    - run-dvc-pipeline
  script:
    - echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - docker build -t "$DOCKERHUB_USERNAME/mlops-iris-classifier:latest" .
    - docker push "$DOCKERHUB_USERNAME/mlops-iris-classifier:latest"
  only:
    - main

deploy:
  stage: deploy
  image: alpine:latest
  dependencies:
    - build-and-push-docker
  script:
    # Save the SSH deploy key as file; make sure you have set DEPLOY_SSH_KEY as a protected file variable
    - apk add --no-cache openssh-client openssl git
    - echo "$DEPLOY_SSH_KEY" > id_rsa
    - chmod 600 id_rsa
    - openssl rsa -in id_rsa -check || exit 1
    # Connect & deploy
    - ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i id_rsa ubuntu@192.168.18.2 "
        if [ ! -d 'mlops-iris-classifier' ]; then
          git clone https://${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
          cd mlops-iris
        else
          cd mlops-iris
          git pull
        fi
        chmod +x ./scripts/deploy.sh
        ./scripts/deploy.sh
      "
  only:
    - main
