name: MLOps CI/CD Pipeline iris Classifier

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      
      - name: Lint with flake8
        run: |
          # Run flake8 with specific error checks and configurations
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  run-dvc-pipeline:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python and DVC
        uses: iterative/setup-dvc@v1
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Install Python dependencies
        run: pip install -r requirements.txt dvc[s3]

      - name: Configure DVC for AWS S3
        run: |
          # Configure the DVC remote storage to point to your S3 bucket
          dvc remote add -f -d storage s3://${{ secrets.AWS_S3_BUCKET }}
          # Ensure any old endpointurl is removed
          dvc remote modify storage endpointurl ""
      
      - name: Pull data from DVC remote
        run: dvc pull -r storage || true
      
      - name: Reproduce DVC pipeline
        run: dvc repro
      
      - name: Push data to DVC remote
        run: dvc push -r storage

      - name: Commit and Push DVC changes
        run: |
          # Configure git user for the commit
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Add all changes (e.g., dvc.lock file)
          git add .
          
          # Commit the changes if there are any, and skip CI for this commit
          git commit -m "Update DVC tracked files [ci skip]" || echo "No changes to commit"
          
          # Push the changes back to the main branch
          git push "https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}" HEAD:main


  build-and-push-docker:
    needs: run-dvc-pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mlops-iris-classifier:latest


  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to remote server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # This script runs on your deployment server
            # It clones the repo if it doesn't exist, otherwise pulls the latest changes.
            REPO_URL="https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git"
            REPO_DIR="mlops-iris"

            if [ ! -d "$REPO_DIR" ]; then
              echo "Cloning repository..."
              git clone "$REPO_URL" "$REPO_DIR"
              cd "$REPO_DIR"
            else
              echo "Pulling latest changes..."
              cd "$REPO_DIR"
              git pull
            fi
            
            # Make the deployment script executable and run it
            echo "Running deployment script..."
            chmod +x ./scripts/deploy.sh
            ./scripts/deploy.sh
