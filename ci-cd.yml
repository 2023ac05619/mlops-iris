name: MLOps CI/CD Pipeline IRIS Flower Classifier

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  run-ml-pipeline:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python and DVC
        uses: iterative/setup-dvc@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Install Python dependencies
        run: pip install -r requirements.txt dvc[s3]
      - name: Configure DVC remote
        run: |
          dvc remote add -f -d storage s3://${{ secrets.AWS_S3_BUCKET }}
          dvc remote modify storage endpointurl "https://s3.ap-south-1.amazonaws.com"
      - name: Pull DVC data and models
        run: dvc pull -r storage --force
      
      - name: Reproduce ML pipeline
        run: |
          # Check if dvc.lock has changed when data is updated
          dvc repro 
      
      - name: Push and Commit DVC changes
        run: |
          # Only commit and push if dvc.lock has changed when models are updated
          if [ -n "$(git status --porcelain dvc.lock)" ]; then
            dvc push -r storage
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git add dvc.lock models.dvc
            git commit -m "Update DVC models and data [ci skip]"
            git push "https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}" HEAD:main
          else
            echo "No DVC changes to commit."
          fi

      - name: Upload model artifacts for next job
        uses: actions/upload-artifact@v4
        with:
          name: model-artifacts
          path: models/

  build-and-push-docker:
    needs: run-ml-pipeline
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: model-artifacts
          path: models/
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Generate date-stamped tag
        id: get_tag
        run: |
          # Creating unique tag for the Docker image
          echo "tag=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_REPO }}:latest
            ${{ secrets.DOCKERHUB_REPO }}:${{ steps.get_tag.outputs.tag }}

  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Display Deployment Information
        run: |
          echo "Deployment Job Triggered"
          echo "---------------------------------"
          echo "Image to deploy: ${{ secrets.DOCKERHUB_REPO }}:${{ needs.build-and-push-docker.outputs.image_tag }}"
          echo ""
          echo "To deploy, run the following command on your server:"
          echo "cd mlops-iris && ./scripts/redeploy_app.sh ${{ needs.build-and-push-docker.outputs.image_tag }}"
          echo "---------------------------------"
