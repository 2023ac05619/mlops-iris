version: '3.8'

services:
  mlops-app: # MLOPS Application Service
    build: .
    container_name: mlops-iris-app
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - MLFLOW_TRACKING_URI=http://mlflow-ui:5000
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - GITHUB_REPOSITORY=${GITHUB_REPOSITORY:-}
      - GITHUB_WORKFLOW_FILE=${GITHUB_WORKFLOW_FILE:-ci-cd.yml}
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./mlruns:/app/mlruns
      - ./backups:/app/backups
    depends_on:
      - mlflow-ui
      - prometheus
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MLflow Tracking UI
  mlflow-ui:
    image: python:3.9-slim
    container_name: mlops-mlflow-ui
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=file:///mlflow/mlruns
    volumes:
      - ./mlruns:/mlflow/mlruns
    command: >
      bash -c "
        pip install mlflow==2.8.1 &&
        mlflow ui --host 0.0.0.0 --port 5000 --backend-store-uri file:///mlflow/mlruns
      "
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: mlops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - mlops-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: mlops-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=mlops123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./grafana-dashboard.json:/var/lib/grafana/dashboards/mlops-dashboard.json
      - ./grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
    depends_on:
      - prometheus
    networks:
      - mlops-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mlops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data backup service
  backup-service:
    image: alpine:latest
    container_name: mlops-backup
    volumes:
      - ./data:/backup/data:ro
      - ./models:/backup/models:ro
      - ./logs:/backup/logs:ro
      - ./mlruns:/backup/mlruns:ro
      - ./backups:/backups
    command: >
      sh -c "
        apk add --no-cache tar gzip &&
        while true; do
          echo 'Creating backup...'
          DATE=$$(date +%Y%m%d_%H%M%S)
          tar -czf /backups/mlops_backup_$$DATE.tar.gz -C /backup .
          find /backups -name '*.tar.gz' -mtime +7 -delete
          echo 'Backup completed. Sleeping for 6 hours...'
          sleep 21600
        done
      "
    networks:
      - mlops-network
    restart: unless-stopped

networks:
  mlops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

